package com.example.system.oms.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.system.oms.greendao.gen.entity.Order;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "order".
*/
public class OrderDao extends AbstractDao<Order, Long> {

    public static final String TABLENAME = "order";

    /**
     * Properties of entity Order.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderName = new Property(1, String.class, "orderName", false, "ORDER_NAME");
        public final static Property Number = new Property(2, String.class, "number", false, "NUMBER");
        public final static Property Price = new Property(3, long.class, "price", false, "PRICE");
        public final static Property TotalPrice = new Property(4, long.class, "totalPrice", false, "TOTAL_PRICE");
        public final static Property Customer = new Property(5, String.class, "customer", false, "CUSTOMER");
        public final static Property CustomPhone = new Property(6, Long.class, "customPhone", false, "CUSTOM_PHONE");
        public final static Property DataTime = new Property(7, String.class, "dataTime", false, "DATA_TIME");
    }


    public OrderDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"order\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ORDER_NAME\" TEXT," + // 1: orderName
                "\"NUMBER\" TEXT," + // 2: number
                "\"PRICE\" INTEGER NOT NULL ," + // 3: price
                "\"TOTAL_PRICE\" INTEGER NOT NULL ," + // 4: totalPrice
                "\"CUSTOMER\" TEXT," + // 5: customer
                "\"CUSTOM_PHONE\" INTEGER," + // 6: customPhone
                "\"DATA_TIME\" TEXT);"); // 7: dataTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"order\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Order entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderName = entity.getOrderName();
        if (orderName != null) {
            stmt.bindString(2, orderName);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(3, number);
        }
        stmt.bindLong(4, entity.getPrice());
        stmt.bindLong(5, entity.getTotalPrice());
 
        String customer = entity.getCustomer();
        if (customer != null) {
            stmt.bindString(6, customer);
        }
 
        Long customPhone = entity.getCustomPhone();
        if (customPhone != null) {
            stmt.bindLong(7, customPhone);
        }
 
        String dataTime = entity.getDataTime();
        if (dataTime != null) {
            stmt.bindString(8, dataTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Order entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderName = entity.getOrderName();
        if (orderName != null) {
            stmt.bindString(2, orderName);
        }
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(3, number);
        }
        stmt.bindLong(4, entity.getPrice());
        stmt.bindLong(5, entity.getTotalPrice());
 
        String customer = entity.getCustomer();
        if (customer != null) {
            stmt.bindString(6, customer);
        }
 
        Long customPhone = entity.getCustomPhone();
        if (customPhone != null) {
            stmt.bindLong(7, customPhone);
        }
 
        String dataTime = entity.getDataTime();
        if (dataTime != null) {
            stmt.bindString(8, dataTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Order readEntity(Cursor cursor, int offset) {
        Order entity = new Order( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // orderName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // number
            cursor.getLong(offset + 3), // price
            cursor.getLong(offset + 4), // totalPrice
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // customer
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // customPhone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // dataTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Order entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPrice(cursor.getLong(offset + 3));
        entity.setTotalPrice(cursor.getLong(offset + 4));
        entity.setCustomer(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCustomPhone(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setDataTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Order entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Order entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Order entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
